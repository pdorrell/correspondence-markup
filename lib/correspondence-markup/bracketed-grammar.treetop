require "correspondence-markup/types"

# Grammar for a markup language which can be compiled into the HTML format
# required by correspondence.js

# General note on bracketing of sequences: different components are enclosed
# by different types of bracket, in particular:
#
# * item: "[]"
# * line: "[]"
# * block: "{}"
# * translation: "()"
#
# However, in anticipation of a UI where the user may choose the granularity
# at which to edit components of particular content, the parsing of brackets
# is handled by the parent component, e.g. the "{}" bracketing of blocks
# is specified in the grammar rule for translation.
# The motivation for this is: if a user is editing a block definition in a UI text area, 
# there should be no necessity for the user to enter the enclosing "{}" brackets, 
# because the UI text area implicitly encloses the definition that the user is editing.
# So the software would want to parse the definition of a block without the {}.
# (And if the user was editing each line in a separate text field, then
# similarly the user would not want to include the outer "[]" brackets in each
# line definition.)

grammar CorrespondenceMarkupLanguage

  # Include the Module containing Ruby classes representing the AST nodes
  include CorrespondenceMarkup

  # This rule defines a sequence of translations (intended to be displayed on one web page).
  # Individual translations are independent of each other
  # (although typically a sequence of translations
  # where each translation has blocks with the same sequence of languages, 
  # e.g. three translations of two blocks each with languages 
  # spanish/english, spanish/english, spanish/english, representing the
  # translations of three verses of a song).
  rule translations
    s translations:("(" translation ")" s)*
    {
      # Return an array of Translation's
      def value
        translations.elements.map {|e| e.translation.value}
      end
    }
  end

  # A translation is a group of blocks where each block represents
  # the same information in a different "language".
  rule translation
    s title:translation_title? s blocks:("{" block "}" s)*
    { 
      # Return a Translation
      def value
        blockObjects = blocks.elements.map {|e| e.block.value}
        title_value = title.elements ? title.elements[2].text_value : nil
        CorrespondenceMarkup::Translation.new(title_value, blockObjects)
      end
    }
  end
  
  # Optional lengthy title of a particular translation. 
  # (Intended to be displayed as the title of the translation
  # describing the information presented in the translation.)
  rule translation_title
    "#" s text:([^{\n]*) "\n"
    {
      def value
        elements[2].text_value
      end
    }
  end

  # A block is one of two or more blocks in a translation
  # (although the grammar does not impose any count restriction, in anticipation
  # of application users editing and saving incomplete content).
  # A block has a "type" (short language description intended to map to a CSS class), 
  # a "description" (longer but still concise language description for display to the reader), 
  # and contains a sequence of "lines".
  rule block
    block_annotation s lines:("[" line "]" s)*
    { 
      # Return a Block
      def value
        lineObjects = lines.elements.map {|e| e.line.value}
        language_id, language_title = block_annotation.value
        CorrespondenceMarkup::Block.new(language_id, language_title, 
                                        lineObjects)
      end
    }
  end

  # Block class (for the block's language id), with rules similar to those of a CSS class identifier.
  rule block_language_id
    ([a-zA-Z] [a-zA-Z0-9_-]*)?
  end

  # Block annotation contains the language id and the language title (both optional, but strongly recommended)
  rule block_annotation
    block_language_id language_title_section:(":" s language_title:[^\n]* "\n")?
    {
      # Return an array of two strings for the language id and the language title
      def value
        language_id = block_language_id.text_value
        language_title = nil
        if language_title_section.elements
          language_title = language_title_section.language_title.text_value
        end
        [language_id, language_title]
      end
    }
  end

  # A line is a sub-block of a block which contains a sequence of items and "non-items".
  # A line has an upper-case alphabetic ID (which should be unique within a block, 
  # and which should be the ID of a line in the first block of a translation, but
  # neither of these rules is required by the grammar).
  # The line ID is used as a default prefix for any item IDs that do not start with 
  # alphabetic characters (so a full item ID is always alphabetic followed by something else).
  rule line
    optional_id:(id:[A-Z]* ":")? components:(item / non_item)*
    { 
      # Return a Line
      def value
        line_id = optional_id.elements ? optional_id.elements[0].text_value : ""
        componentObjects = components.elements.map {|e| e.value(line_id)}
        CorrespondenceMarkup::Line.new(line_id, componentObjects)
      end
    }
  end
  
  # A "non-item" is textual content in a line that is not part of an actual item.
  # In effect this is text which is either not translatable to content in other blocks
  # in the same translation, or, it is considered unimportant to identify its translation.
  # For example, in the second case, punctuation in sentences, where the translation is reasonably 
  # obvious, and we wish to highlight only the translations of the actual words.
  rule non_item
    text:text
    { 
      # Given the line ID (as a default prefix for the item IDs, which is ignored for non-items), 
      # return a NonItem.
      def value(line_id = "")
        CorrespondenceMarkup::NonItem.new(text.value)
      end
    }
  end

  # An item is textual content with an ID, where different items in the same translation
  # with the same ID are considered to be related to each other.
  # Typically, items with the same ID in the same block are considered to be part of the
  # "same item", and items with the same ID in different blocks are considered to be
  # translations of each other.
  # An item ID consists of an upper-case alphabetic prefix followed by a numeric ID.
  # Any item ID that lacks an alphabetic prefix will have the line ID of the containing
  # line added as a prefix to its ID.
  # (This reflects the assumption that an item usually relates to items in lines in other
  # blocks with the same line ID, but occasionally an item relates to an item in
  # some other line in another block.)
  rule item
    "[" id:item_ids S text:text "]"
    { 
      # Given the line ID (as a default prefix for the item IDs), return an Item
      def value(line_id = "")
        item_ids = id.text_value.split(",")
        item_ids = item_ids.map { |item_id| item_id.match(/[A-Z]/) ? item_id : line_id + item_id}
        CorrespondenceMarkup::Item.new(item_ids.join(","), text.value)
      end
    }
  end

  # Text is the textual component of both items and non-items.
  # Text is delimited by "]", "[" and (at the beginning of items) whitespace.
  # Text can include backslash-quoted characters, for example to include any of the delimiter characters.
  rule text
    (("\\" .) / (![\[\]\\] .))+
    { 
      # Return the text, de-quoting any backslash-quoted characters.
      def value
        text_value.gsub(/\\(.)/, '\1')
      end
    }
  end
  
  # Items can have multiple IDs, in which case they are separated by commas
  # (and no whitespace). If there are multiple IDs, the convention of applying the
  # line ID as a default prefix is applied individually to each ID.
  # So, for example, "2,A2,3" in line B would be expanded to "B2,A2,B3".
  rule item_ids
    item_id ("," item_id)*
  end

  # An item ID - optional upper-case alphabetic prefix, followed by a numeric ID.
  rule item_id
    [A-Z]* [0-9]+
  end
  
  # Rule for optional whitespace
  rule s
    [\s\n\r\t]*
  end

  # Rule for mandatory whitespace
  rule S
    [\s\n\r\t]+
  end

end
