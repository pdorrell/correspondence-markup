require "correspondence-markup/types"

grammar CorrespondenceMarkupLanguage

  include CorrespondenceMarkup

  rule structure_groups
    s groups:("(" structure_group ")" s)*
    {
      def value
        groups.elements.map {|e| e.structure_group.value}
      end
    }
  end

  rule structure_group
    s description:structure_group_description? s structures:("{" structure "}" s)*
    { 
      def value
        structureObjects = structures.elements.map {|e| e.structure.value}
        CorrespondenceMarkup::StructureGroup.new(structureObjects)
      end
    }
  end
  
  rule structure_group_description
    "#" s [^{\n]* "\n"
  end

  rule structure
    class:structure_class s itemGroups:("[" item_group "]" s)*
    { 
      def value
        itemGroupObjects = itemGroups.elements.map {|e| e.item_group.value}
        CorrespondenceMarkup::Structure.new(itemGroupObjects)
      end
    }
  end
  
  rule structure_class
    ([a-zA-Z] [a-zA-Z0-9_-]*)?
  end

  rule item_group
    optional_id:(id:[A-Z]* ":")? components:(item / non_item)*
    { 
      def value
        group_id = optional_id.elements ? optional_id.elements[0].text_value : ""
        componentObjects = components.elements.map {|e| e.value(group_id)}
        CorrespondenceMarkup::ItemGroup.new(group_id, componentObjects)
      end
    }
  end
  
  rule non_item
    text:text
    { 
      def value(group_id = "")
        CorrespondenceMarkup::NonItem.new(text.value)
      end
    }
  end

  rule item
    "[" id:item_id S text:text "]"
    { 
      def value(group_id = "")
        item_id = id.text_value
        if !item_id.match(/[A-Z]/)
          item_id = group_id + item_id
        end
        CorrespondenceMarkup::Item.new(item_id, text.value)
      end
    }
  end

  rule text
    (("\\" .) / (![\[\]\\] .))+
    { 
      def value
        text_value.gsub(/\\(.)/, '\1')
      end
    }
  end

  rule item_id
    [A-Z]* [0-9]+
  end
  
  rule s
    [\s\n\r\t]*
  end

  rule S
    [\s\n\r\t]+
  end

end
