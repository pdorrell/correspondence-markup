require "correspondence-markup/types"

grammar CorrespondenceMarkupLanguage

  include CorrespondenceMarkup

  rule structure_groups
    s groups:("[" structure_group "]" s)*
    {
      def value
        groups.elements.map {|e| e.structure_group.value}
      end
    }
  end

  rule structure_group
    s structures:("[" structure "]" s)*
    { 
      def value
        structureObjects = structures.elements.map {|e| e.structure.value}
        CorrespondenceMarkup::StructureGroup.new(structureObjects)
      end
    }
  end

  rule structure
    s itemGroups:("[" item_group "]" s)*
    { 
      def value
        itemGroupObjects = itemGroups.elements.map {|e| e.item_group.value}
        CorrespondenceMarkup::Structure.new(itemGroupObjects)
      end
    }
  end
  
  rule item_group
    id:(([A-Z]+ S) / s) components:(item / non_item)*
    { 
      def value
        CorrespondenceMarkup::ItemGroup.new(id.text_value.rstrip, components.elements.map(&:value))
      end
    }
  end
  
  rule non_item
    text:text
    { 
      def value
        CorrespondenceMarkup::NonItem.new(text.value)
      end
    }
  end

  rule item
    "[" id:item_id S text:text "]"
    { 
      def value
        CorrespondenceMarkup::Item.new(id.value, text.value)
      end
    }
  end

  rule text
    (("\\" .) / (![\[\]\\] .))+
    { 
      def value
        text_value.gsub(/\\(.)/, '\1')
      end
    }
  end

  rule item_id
    [A-Z]* [0-9]+
    { 
      def value
        text_value
      end
    }
  end

  rule s
    [\s\n\r\t]*
  end

  rule S
    [\s\n\r\t]+
  end

end
